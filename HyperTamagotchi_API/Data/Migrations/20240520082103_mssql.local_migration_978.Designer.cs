// <auto-generated />
using System;
using HyperTamagotchi_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HyperTamagotchi_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240520082103_mssql.local_migration_978")]
    partial class mssqllocal_migration_978
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HyperTamagotchi_API.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Kiruna",
                            StreetAddress = "Timmermansgatan 2A",
                            ZipCode = "98137"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Örnsköldsvik",
                            StreetAddress = "Rundvägen 11D",
                            ZipCode = "89144"
                        });
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartId"));

                    b.HasKey("ShoppingCartId");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            ShoppingCartId = 1
                        },
                        new
                        {
                            ShoppingCartId = 2
                        });
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.ShoppingItem", b =>
                {
                    b.Property<int>("ShoppingItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingItemId"));

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<byte?>("Quantity")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Stock")
                        .HasColumnType("tinyint");

                    b.HasKey("ShoppingItemId");

                    b.ToTable("ShoppingItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ShoppingItem");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            ShoppingItemId = 1,
                            CurrencyType = "SEK",
                            Description = "Nutritious food pack to keep your Tamagotchi healthy and happy.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Food_Pack.png",
                            Name = "Tamagotchi Food Pack",
                            Price = 75f,
                            Stock = (byte)200
                        },
                        new
                        {
                            ShoppingItemId = 2,
                            CurrencyType = "SEK",
                            Description = "Portable water bottle to keep your Tamagotchi hydrated.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Water_Bottle.png",
                            Name = "Tamagotchi Water Bottle",
                            Price = 50f,
                            Stock = (byte)150
                        },
                        new
                        {
                            ShoppingItemId = 3,
                            CurrencyType = "SEK",
                            Description = "Cozy bed for your Tamagotchi to sleep and rest comfortably.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Bed.png",
                            Name = "Tamagotchi Bed",
                            Price = 200f,
                            Stock = (byte)100
                        },
                        new
                        {
                            ShoppingItemId = 4,
                            CurrencyType = "SEK",
                            Description = "Fun exercise wheel to keep your Tamagotchi active and fit.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Exercise_Wheel.png",
                            Name = "Tamagotchi Exercise Wheel",
                            Price = 150f,
                            Stock = (byte)120
                        },
                        new
                        {
                            ShoppingItemId = 5,
                            CurrencyType = "SEK",
                            Description = "Essential cleaning kit to maintain your Tamagotchi's hygiene.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Cleaning_Kit.png",
                            Name = "Tamagotchi Cleaning Kit",
                            Price = 100f,
                            Stock = (byte)80
                        },
                        new
                        {
                            ShoppingItemId = 6,
                            CurrencyType = "SEK",
                            Description = "A set of fun toys to entertain your Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Toy_Set.png",
                            Name = "Tamagotchi Toy Set",
                            Price = 60f,
                            Stock = (byte)170
                        },
                        new
                        {
                            ShoppingItemId = 7,
                            CurrencyType = "SEK",
                            Description = "Vitamins and supplements for your Tamagotchi's wellbeing.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Health_Supplement.png",
                            Name = "Tamagotchi Health Supplement",
                            Price = 90f,
                            Stock = (byte)130
                        },
                        new
                        {
                            ShoppingItemId = 8,
                            CurrencyType = "SEK",
                            Description = "Convenient carrier for traveling with your Tamagotchi safely.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Travel_Carrier.png",
                            Name = "Tamagotchi Travel Carrier",
                            Price = 180f,
                            Stock = (byte)90
                        },
                        new
                        {
                            ShoppingItemId = 9,
                            CurrencyType = "SEK",
                            Description = "Complete bath kit to keep your Tamagotchi clean and fresh.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Bath_Kit.png",
                            Name = "Tamagotchi Bath Kit",
                            Price = 85f,
                            Stock = (byte)110
                        },
                        new
                        {
                            ShoppingItemId = 10,
                            CurrencyType = "SEK",
                            Description = "Essential first aid items for your Tamagotchi's minor injuries.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/First_Aid_Kit.png",
                            Name = "Tamagotchi First Aid Kit",
                            Price = 120f,
                            Stock = (byte)75
                        },
                        new
                        {
                            ShoppingItemId = 11,
                            CurrencyType = "SEK",
                            Description = "Comprehensive grooming kit for your Tamagotchi's fur and nails.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Grooming_Kit.png",
                            Name = "Tamagotchi Grooming Kit",
                            Price = 110f,
                            Stock = (byte)95
                        },
                        new
                        {
                            ShoppingItemId = 12,
                            CurrencyType = "SEK",
                            Description = "Soft and warm blanket for your Tamagotchi to snuggle in.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Blanket.png",
                            Name = "Tamagotchi Blanket",
                            Price = 70f,
                            Stock = (byte)140
                        },
                        new
                        {
                            ShoppingItemId = 13,
                            CurrencyType = "SEK",
                            Description = "Stylish feeding dish perfect for serving Tamagotchi meals.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Feeding_Dish.png",
                            Name = "Tamagotchi Feeding Dish",
                            Price = 45f,
                            Stock = (byte)160
                        },
                        new
                        {
                            ShoppingItemId = 14,
                            CurrencyType = "SEK",
                            Description = "Adorable sun hat to protect your Tamagotchi from the sun.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Sun_Hat.png",
                            Name = "Tamagotchi Sun Hat",
                            Price = 55f,
                            Stock = (byte)180
                        },
                        new
                        {
                            ShoppingItemId = 15,
                            CurrencyType = "SEK",
                            Description = "Personalized ID tag with your Tamagotchi’s name and info.",
                            Discount = 1f,
                            ImagePath = "Assets/ShoppingItem/Id_Tag.png",
                            Name = "Tamagotchi ID Tag",
                            Price = 35f,
                            Stock = (byte)200
                        });
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.ShoppingItemOrder", b =>
                {
                    b.Property<int>("ShoppingItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ShoppingItemOrders");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.ShoppingItemShoppingCart", b =>
                {
                    b.Property<int>("ShoppingItemId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingItemId", "ShoppingCartId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingItemShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "067028e6-3218-4632-9086-6e5a3eac11a3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0793c5be-2c8a-4aee-abe9-97127838911f",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "43218869-d83d-4e9c-b19e-c1adc1da1453",
                            RoleId = "067028e6-3218-4632-9086-6e5a3eac11a3"
                        },
                        new
                        {
                            UserId = "fdd69357-45d0-4f57-a4ed-555d7e5df98b",
                            RoleId = "0793c5be-2c8a-4aee-abe9-97127838911f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.Tamagotchi", b =>
                {
                    b.HasBaseType("HyperTamagotchi_API.Models.ShoppingItem");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Experience")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Mood")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TamagotchiColor")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TamagotchiStage")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TamagotchiType")
                        .HasColumnType("tinyint");

                    b.HasIndex("CustomerId");

                    b.HasDiscriminator().HasValue("Tamagotchi");

                    b.HasData(
                        new
                        {
                            ShoppingItemId = 16,
                            CurrencyType = "SEK",
                            Description = "Meet Rocker Rick, the egg Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Rocker/Rocker_Egg_Default.png",
                            Name = "Rocker Rick",
                            Price = 200f,
                            Stock = (byte)100,
                            Experience = (byte)0,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)1,
                            TamagotchiStage = (byte)1,
                            TamagotchiType = (byte)1
                        },
                        new
                        {
                            ShoppingItemId = 17,
                            CurrencyType = "SEK",
                            Description = "Meet Rocker Rhonda, the child Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Rocker/Rocker_Child_Blue.png",
                            Name = "Rocker Rhonda",
                            Price = 250f,
                            Stock = (byte)100,
                            Experience = (byte)50,
                            Mood = (byte)5,
                            TamagotchiColor = (byte)4,
                            TamagotchiStage = (byte)2,
                            TamagotchiType = (byte)1
                        },
                        new
                        {
                            ShoppingItemId = 18,
                            CurrencyType = "SEK",
                            Description = "Meet Rocker Rex, the adult Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Rocker/Rocker_Adult_Red.png",
                            Name = "Rocker Rex",
                            Price = 300f,
                            Stock = (byte)100,
                            Experience = (byte)100,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)2,
                            TamagotchiStage = (byte)3,
                            TamagotchiType = (byte)1
                        },
                        new
                        {
                            ShoppingItemId = 19,
                            CurrencyType = "SEK",
                            Description = "Meet Farmer Fred, the egg Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Farmer/Farmer_Egg_Default.png",
                            Name = "Farmer Fred",
                            Price = 200f,
                            Stock = (byte)100,
                            Experience = (byte)0,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)1,
                            TamagotchiStage = (byte)1,
                            TamagotchiType = (byte)2
                        },
                        new
                        {
                            ShoppingItemId = 20,
                            CurrencyType = "SEK",
                            Description = "Meet Farmer Fiona, the child Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Farmer/Farmer_Child_Green.png",
                            Name = "Farmer Fiona",
                            Price = 250f,
                            Stock = (byte)100,
                            Experience = (byte)50,
                            Mood = (byte)3,
                            TamagotchiColor = (byte)3,
                            TamagotchiStage = (byte)2,
                            TamagotchiType = (byte)2
                        },
                        new
                        {
                            ShoppingItemId = 21,
                            CurrencyType = "SEK",
                            Description = "Meet Farmer Frank, the adult Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Farmer/Farmer_Adult_Red.png",
                            Name = "Farmer Frank",
                            Price = 300f,
                            Stock = (byte)100,
                            Experience = (byte)100,
                            Mood = (byte)4,
                            TamagotchiColor = (byte)2,
                            TamagotchiStage = (byte)3,
                            TamagotchiType = (byte)2
                        },
                        new
                        {
                            ShoppingItemId = 22,
                            CurrencyType = "SEK",
                            Description = "Meet Developer Darin, the egg Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Developer/Developer_Egg_Default.png",
                            Name = "Developer Darin",
                            Price = 200f,
                            Stock = (byte)100,
                            Experience = (byte)0,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)1,
                            TamagotchiStage = (byte)1,
                            TamagotchiType = (byte)3
                        },
                        new
                        {
                            ShoppingItemId = 23,
                            CurrencyType = "SEK",
                            Description = "Meet Developer Daisy, the child Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Developer/Developer_Child_Blue.png",
                            Name = "Developer Daisy",
                            Price = 250f,
                            Stock = (byte)100,
                            Experience = (byte)50,
                            Mood = (byte)2,
                            TamagotchiColor = (byte)4,
                            TamagotchiStage = (byte)2,
                            TamagotchiType = (byte)3
                        },
                        new
                        {
                            ShoppingItemId = 24,
                            CurrencyType = "SEK",
                            Description = "Meet Developer Dave, the adult Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Developer/Developer_Adult_Green.png",
                            Name = "Developer Dave",
                            Price = 300f,
                            Stock = (byte)100,
                            Experience = (byte)100,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)3,
                            TamagotchiStage = (byte)3,
                            TamagotchiType = (byte)3
                        },
                        new
                        {
                            ShoppingItemId = 25,
                            CurrencyType = "SEK",
                            Description = "Meet Athlete Alex, the egg Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Athlete/Athlete_Egg_Default.png",
                            Name = "Athlete Alex",
                            Price = 200f,
                            Stock = (byte)100,
                            Experience = (byte)0,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)1,
                            TamagotchiStage = (byte)1,
                            TamagotchiType = (byte)4
                        },
                        new
                        {
                            ShoppingItemId = 26,
                            CurrencyType = "SEK",
                            Description = "Meet Athlete Annie, the child Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Athlete/Athlete_Child_Green.png",
                            Name = "Athlete Annie",
                            Price = 250f,
                            Stock = (byte)100,
                            Experience = (byte)50,
                            Mood = (byte)5,
                            TamagotchiColor = (byte)3,
                            TamagotchiStage = (byte)2,
                            TamagotchiType = (byte)4
                        },
                        new
                        {
                            ShoppingItemId = 27,
                            CurrencyType = "SEK",
                            Description = "Meet Athlete Arnold, the adult Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Athlete/Athlete_Adult_Red.png",
                            Name = "Athlete Arnold",
                            Price = 300f,
                            Stock = (byte)100,
                            Experience = (byte)100,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)2,
                            TamagotchiStage = (byte)3,
                            TamagotchiType = (byte)4
                        },
                        new
                        {
                            ShoppingItemId = 28,
                            CurrencyType = "SEK",
                            Description = "Meet Constructor Colin, the egg Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Constructor/Constructor_Egg_Default.png",
                            Name = "Constructor Colin",
                            Price = 200f,
                            Stock = (byte)100,
                            Experience = (byte)0,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)1,
                            TamagotchiStage = (byte)1,
                            TamagotchiType = (byte)5
                        },
                        new
                        {
                            ShoppingItemId = 29,
                            CurrencyType = "SEK",
                            Description = "Meet Constructor Cindy, the child Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Constructor/Constructor_Child_Blue.png",
                            Name = "Constructor Cindy",
                            Price = 250f,
                            Stock = (byte)100,
                            Experience = (byte)50,
                            Mood = (byte)2,
                            TamagotchiColor = (byte)4,
                            TamagotchiStage = (byte)2,
                            TamagotchiType = (byte)5
                        },
                        new
                        {
                            ShoppingItemId = 30,
                            CurrencyType = "SEK",
                            Description = "Meet Constructor Carl, the adult Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Constructor/Constructor_Adult_Green.png",
                            Name = "Constructor Carl",
                            Price = 300f,
                            Stock = (byte)100,
                            Experience = (byte)100,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)3,
                            TamagotchiStage = (byte)3,
                            TamagotchiType = (byte)5
                        },
                        new
                        {
                            ShoppingItemId = 31,
                            CurrencyType = "SEK",
                            Description = "Meet Philosopher Phil, the egg Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Philosopher/Philosopher_Egg_Default.png",
                            Name = "Philosopher Phil",
                            Price = 200f,
                            Stock = (byte)100,
                            Experience = (byte)0,
                            Mood = (byte)1,
                            TamagotchiColor = (byte)1,
                            TamagotchiStage = (byte)1,
                            TamagotchiType = (byte)6
                        },
                        new
                        {
                            ShoppingItemId = 32,
                            CurrencyType = "SEK",
                            Description = "Meet Philosopher Pippa, the child Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Philosopher/Philosopher_Child_Red.png",
                            Name = "Philosopher Pippa",
                            Price = 250f,
                            Stock = (byte)100,
                            Experience = (byte)50,
                            Mood = (byte)3,
                            TamagotchiColor = (byte)2,
                            TamagotchiStage = (byte)2,
                            TamagotchiType = (byte)6
                        },
                        new
                        {
                            ShoppingItemId = 33,
                            CurrencyType = "SEK",
                            Description = "Meet Philosopher Pete, the adult Tamagotchi.",
                            Discount = 1f,
                            ImagePath = "Assets/Tamagotchi/Philosopher/Philosopher_Adult_Blue.png",
                            Name = "Philosopher Pete",
                            Price = 300f,
                            Stock = (byte)100,
                            Experience = (byte)100,
                            Mood = (byte)4,
                            TamagotchiColor = (byte)4,
                            TamagotchiStage = (byte)3,
                            TamagotchiType = (byte)6
                        });
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.Customer", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasIndex("AddressId");

                    b.HasIndex("ShoppingCartId");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = "43218869-d83d-4e9c-b19e-c1adc1da1453",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d6ca0b4-edbc-42bd-a5eb-a01dd832c53c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENuyISfxmJLMxvqV4oWfz/Hs1eJE7P0yGv54CmTSS30UgPpSUUWmsl5WqpysUn/fpw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5ba17ede-a0a4-4a0f-bd86-2ec376d8dddd",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            AddressId = 1,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            ShoppingCartId = 1
                        },
                        new
                        {
                            Id = "fdd69357-45d0-4f57-a4ed-555d7e5df98b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "466aa377-7c7c-474e-b394-3f606f12b945",
                            Email = "tobias@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TOBIAS@GMAIL.COM",
                            NormalizedUserName = "TOBIAS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNbfVTKMC+jO+jAaptTrU4T8ueshg7WUx4zG4073CxpgZ+fZjiNccWN5s2H9KvZpA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8b374c31-14de-4361-8f2f-767d0e11f586",
                            TwoFactorEnabled = false,
                            UserName = "tobias@gmail.com",
                            AddressId = 2,
                            FirstName = "Tobias",
                            LastName = "Skog",
                            ShoppingCartId = 2
                        });
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.Order", b =>
                {
                    b.HasOne("HyperTamagotchi_API.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.ShoppingItemOrder", b =>
                {
                    b.HasOne("HyperTamagotchi_API.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperTamagotchi_API.Models.ShoppingItem", "ShoppingItem")
                        .WithMany("Orders")
                        .HasForeignKey("ShoppingItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ShoppingItem");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.ShoppingItemShoppingCart", b =>
                {
                    b.HasOne("HyperTamagotchi_API.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperTamagotchi_API.Models.ShoppingItem", "ShoppingItem")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingCart");

                    b.Navigation("ShoppingItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.Tamagotchi", b =>
                {
                    b.HasOne("HyperTamagotchi_API.Models.Customer", null)
                        .WithMany("Tamagotchis")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.Customer", b =>
                {
                    b.HasOne("HyperTamagotchi_API.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperTamagotchi_API.Models.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.ShoppingItem", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HyperTamagotchi_API.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Tamagotchis");
                });
#pragma warning restore 612, 618
        }
    }
}
